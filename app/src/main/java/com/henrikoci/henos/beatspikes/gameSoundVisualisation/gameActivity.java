package com.henrikoci.henos.beatspikes.gameSoundVisualisation;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.Button;

import com.henrikoci.henos.beatspikes.R;

import java.io.File;

public class gameActivity extends AppCompatActivity {

    public static File audioFile;

    private static final int PICKFILE_RESULT_CODE = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_game);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Importing your music will allow you to locate the audio file stored on your device. Only seeds generated by this application can be loaded.", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

        Button buttonPick = findViewById(R.id.importMusic);

        buttonPick.setOnClickListener(new Button.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                // TODO Auto-generated method stub

                Intent intentSelectAudio = new Intent();
                intentSelectAudio.setType("audio/mp3");
                intentSelectAudio.setAction(Intent.ACTION_GET_CONTENT);
                startActivityForResult(intentSelectAudio, PICKFILE_RESULT_CODE);
            }
        });
    }


    private String getRealPathFromURI(Uri contentURI) {
        String result;
        Cursor cursor = getContentResolver().query(contentURI, null, null, null, null);
        if (cursor == null) { // Source is Dropbox or other similar local file path
            result = contentURI.getPath();
        } else {
            cursor.moveToFirst();
            int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
            result = cursor.getString(idx);
            cursor.close();
        }
        return result;
    }

    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // TODO Auto-generated method stub
        switch (requestCode) {
            case PICKFILE_RESULT_CODE:
                if (resultCode == RESULT_OK) {
                    System.out.println(data.getData().getPath());

                    Uri selectedAudioURI = data.getData();
                    audioFile = new File(getRealPathFromURI(selectedAudioURI));

                    System.out.println(audioFile);

                    int hasReadStoragePermission = 0;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        hasReadStoragePermission = checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE);
                    }
                    if (hasReadStoragePermission != PackageManager.PERMISSION_GRANTED) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                            requestPermissions(new String[] {Manifest.permission.READ_EXTERNAL_STORAGE},
                                    REQUEST_CODE_ASK_PERMISSIONS);
                        }
                        return;
                    }

                    int hasWriteStoragePermission = 0;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        hasWriteStoragePermission = checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE);
                    }
                    if (hasWriteStoragePermission != PackageManager.PERMISSION_GRANTED) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                            requestPermissions(new String[] {Manifest.permission.READ_EXTERNAL_STORAGE},
                                    REQUEST_CODE_ASK_PERMISSIONS);
                        }
                        return;
                    }

                    Intent intent = new Intent(this, visualiserView.class); // Sets a new intent variable to launch the PlayerVisulizerView class
                    startActivity(intent); // Launches the activity of the intent described above
                    finish();
                }
                break;
        }
    }

}